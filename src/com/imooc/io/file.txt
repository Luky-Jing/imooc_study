java.io.File用于表示文件（目录）
File类只用于表示文件（目录）的信息（名称、大小等）不能用于文本内容访问

RandomAccessFile java提供的对文件内容访问，即可读也可写
RandomAccessFile支持随机访问文件，可以访问文件任何位置
-1
java文件模型
在硬盘上的文件是byte bype集合
打开文件
RandomAccessFile raf = new RandomAccessFile(file, "rw")
文件指针，打开文件时指针在开头pointer=0
写方法
raf.write(int)
读方法
int b = raf.read() 读一个字节
文件读写完成后需要关闭


输入流的基本方法
int b = in.read(); 读取一个字节无符号填充到int低八位，-1是EOF
int.read(byte[] buf) 读取数据填充到字节数组buf
int.read(byte[] buf, int start, int size) 读取数据到字节数组buf，从buf的start位置开始存放size长度的数据
输出流基本方法
out.write(int b) 写出一个byte到流，b的低8位
out.write(byte[] buf) 将buf字节数组都写入到流
out.write(byte[] buf, int start, int size)
FileInputStream-->具体实现了在文件上读取数据
FileOutputStream

DataOutputStream/DataInputStream 更方便处理类型数据
DataOutputStream writeInt()/writeDouble()/writeUTF()

BufferedInputStream/BufferedOutputStream 带缓冲区的操作，提高了IO的性能
FileOutputStream-->write()相当于一滴一滴转移水
DataOutputStream-->writeXxx()一瓢一瓢转移水
BufferedOutputStream-->write一桶一桶的转移水

java char 16位

文本文件是文本（char）按照某种编码序列化为byte存储

字符处理
字符流底层任然是基本的字节序列
InputStreamReader 完成byte流解析为char流，按照编码解析
OutputStreamWrite 提供char流到byte流，按照编码处理

FileReader/FileWriter

BufferedReader --> readLine 一次读一行
BufferedWriter/PrintWriter --> 写一行

3.对象序列化，反序列化
1）对象序列化，就是将Object转换位byte序列，反之叫反序列化
2）序列化流（ObjectOutputStream） 是过滤流 writeObject
   反       ObjectInputStream            readObject
3）序列化接口Serializable
    对象必须实现序列化接口，才能进行序列化，否则将出现异常
    这个接口没有任何方法，只是一个标准
4）transient 不做默认序列化，可自己完成序列化
分析ArrayList操作